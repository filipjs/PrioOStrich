Base concepts of the OStrich algorithm can be found here:
http://www.mimuw.edu.pl/~krzadca/ostrich/index.html

TODO - a moze tutaj jakis krotki opis, np w jakis sposob uzywane sa "shares"?

To enable full functionality of the plugin, SLURM version 14.11 is required (coming in November).
In the meantime:
 - you can use it without some of its features 
 - manually apply a patch(**) to SLURM that adds needed support from 14.11



Installation:
  1) download this repository
  2) run "./s.sh patch"
     -> this will create "ostrich-slurm-14.03.0.patch"
  3) apply that patch to SLURM (it works with patch -p1)
  4) (optionally) apply "0001-priority-plugin-support-14.03.patch"(**)
                  which can also be found in the repository
  5) run "./autogen.sh" inside SLURM to create new makefiles
  6) run "./configure" with your favourite options and compile
  7) after deployment change PriorityType to "priority/ostrich" in the configuration file

Summary of the version without patch(**):
  + this is a priority plugin, which means it is loaded dynamically so you only need to copy
    the priority_ostrich.[a|la|so] files to /lib/slurm/
  - configuration option PriorityParameters doesn't work
  - sprio command doesn't work
  - each user is equal, no customization using share values

Summary of the version with patch(**):
  - you need to replace the whole installation on the ControlMashine
  + access to "PriorityParameters"
  + working sprio
  + plugin can use shares to calculate priorities
  - this patch breaks the command "scontrol show config"



Plugin configuration parameters:
  - interval - the frequency of the main loop [default 10 seconds]
               new jobs are acknowledged by the plugin only after the next loop is run 
  - threshold - algorithm parameter, decides the grouping of jobs into campaigns [default 30 minutes]
  - mode - 0 - use shares
         - 1 - each user is equal
  - PriorityFavorSmall - favour small (shortest) jobs

Setting the parameters in the version without patch(**):
  - internal is read from "PriorityCalcPeriod"
  - threshold is read from "PriorityDecayHalfLife"
  - mode is set to 1 and cannot be changed

Setting the parameters in the version with patch(**):
  - simply add parameters to PriorityParameters
  e.g. PriorityParameters=interval=10,threshold=30,mode=0 



How to interpret sprio output:
  - Fairshare component - this is the priority of the campaign the job belongs to
  - JobSize component - this is only to sort jobs inside campaigns (see PriorityFavorSmall)
  - Partition component - priority of the partition, note: this value is not normalized now
  - other components aren't used at this moment



How to interpret partition priority:
  This value is not normalized, it is directly added on top of each job existing priority.
  The first job in each partition will always get a priority value of 500000, next one 499999,
  next one 499998 and so on. Those values are similarly not normalized and are calculated before
  adding the partition priority.

  Here is an example: we have two partitions A and B. A has priority 0, and B has priority 10.
  Both of them cover the same nodes.
  In this case the first 10 jobs send to partition B will always be completed before any job from
  partition A.

  Job priority    partition A  |  partition B
                  500000 + 0      500000 + 10
                  499999 + 0      499999 + 10
                  ...

  What this means, if you set up partitions with priority difference similar to the number of shared
  resources, the partition with lower priority might become starved.
